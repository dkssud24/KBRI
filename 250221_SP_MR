#Step1
#Genome_wide_sig_pqtl
if (!require(archive)) install.packages("archive")
if (!require(data.table)) install.packages("data.table")
if (!require(dplyr)) install.packages("dplyr")

library(archive)
library(data.table)
library(dplyr)

pqtl_path <- "/BiO/hae/000001_UKB_pQTL/"
saved_path <- "/BiO/hae/000005_MRSPI/00_pqtl_sig/"

if (!dir.exists(saved_path)) dir.create(saved_path)

pqtl_files <- list.files(pqtl_path, pattern = "\\.tar$", full.names = TRUE)

pval_threshold <- 1.100015e-12

for (tar_file in pqtl_files) {
  file_name <- tools::file_path_sans_ext(basename(tar_file))
  archive_contents <- archive::archive(tar_file)
  chromosome_files <- archive_contents$path[grepl("chr[0-9]+|chr1[0-9]|chr2[0-2]", archive_contents$path)]
  
  chromosome_data <- lapply(chromosome_files, function(file_path) {
    archive_read <- archive::archive_read(tar_file, file = file_path)
    con <- gzcon(archive_read)
    raw_text <- readLines(con, warn = FALSE)
    text_input <- paste(raw_text, collapse = "\n")
    data <- fread(text_input, na.strings = c("", "NA"))
    close(archive_read)
    return(data)
  })
}
  #pqtl_data$MAF <- pmin(pqtl_data$A1FREQ, 1 - pqtl_data$A1FREQ)
  combined_data <- rbindlist(chromosome_data, fill = TRUE)
  combined_data <- combined_data[combined_data$A1FREQ > 0.01, ]
  combined_data$P <- 10^(-combined_data$LOG10P)
  filtered_data <- combined_data[combined_data$P < pval_threshold, ]
  
  if (nrow(filtered_data) > 0) {
    save_file <- paste0(saved_path, file_name, "_sig.tsv")
    fwrite(filtered_data, save_file, sep = "\t", quote = FALSE, row.names = FALSE)
    cat("Saved:", save_file, "(", nrow(filtered_data), "rows )\n")
  } else {
    cat("No significant data:", file_name, "\n")
  }
}

#Step2
#Clumping
library(data.table)
library(dplyr)

# Load 1000G reference BIM file once
root_bim <- fread("/BiO/hae/000006_ref_1000G/all_bim.txt.v2")

# Set paths
pqtl_path <- "/BiO/hae/000005_MRSPI/00_pqtl_sig/"
output_path <- "/BiO/hae/000005_MRSPI/11_pqtl_sig_clump/"
plink_path <- "plink"
ref_data <- "/BiO/hae/000006_ref_1000G/ref"

# Create output directory if not exists
if (!dir.exists(output_path)) dir.create(output_path)

# List all pqtl files
pqtl_files <- list.files(pqtl_path, pattern = "\\.tsv$", full.names = TRUE)

# Loop through each pqtl file
for (pqtl_file in pqtl_files) {
  pqtl_sig <- fread(pqtl_file)
  pqtl_sig$original <- sub("(:[^:]+){2}$", "", pqtl_sig$ID)
  
  merged_data <- left_join(pqtl_sig, root_bim, by = "original")
  clumping_input <- merged_data[, c("CHROM", "V2", "GENPOS", "ALLELE0", "ALLELE1", "P", "BETA", "SE")]
  colnames(clumping_input) <- c("CHR", "SNP", "BP", "A1", "A2", "P", "BETA", "SE")
  clumping_input <- na.omit(clumping_input)
  
  file_base <- tools::file_path_sans_ext(basename(pqtl_file))
  plink_input_path <- file.path(output_path, paste0(file_base, "_sig.txt"))
  result_output_path <- file.path(output_path, paste0("result_", file_base, "_sig.txt"))

  fwrite(clumping_input, plink_input_path, sep = "\t", quote = FALSE, row.names = FALSE)
  
  plink_command <- paste(plink_path,
                         "--bfile", ref_data,
                         "--clump", plink_input_path,
                         "--clump-kb 1000",
                         "--clump-r2 0.01",
                         "--clump-p1 1",
                         "--clump-p2 1",
                         "--out", result_output_path)

  system(plink_command)

  clumped_file <- paste0(result_output_path, ".clumped")
  
  if (file.exists(clumped_file)) {
    clumped_result <- fread(clumped_file)
    fwrite(clumped_result, paste0(result_output_path, "_clumped.tsv"), sep = "\t", quote = FALSE, row.names = FALSE)
    cat("Clumping completed for:", pqtl_file, "\n")
  } else {
    cat("No significant clumping results for:", pqtl_file, "\n")
  }
}


#step3_single
#pQTL_clumping_QC_for_input_MR_tmp
# Load necessary libraries
library(data.table)
library(dplyr)

# Load pQTL clumped data
pqtl <- fread("/BiO//hae/000005_MRSPI/11_pqtl_sig_clump/ZP3_P21754_OID30265_v1_Cardiometabolic_II_sig_sig.txt")
pqtl <- data.frame(pqtl)

# Load clumped SNPs
pqtl_clump <- fread("/BiO/hae/000005_MRSPI/11_pqtl_sig_clump/result_ZP3_P21754_OID30265_v1_Cardiometabolic_II_sig_sig.txt_clumped.tsv")
pqtl_clump_snp <- data.frame(SNP = pqtl_clump$SNP)

# Merge clumped SNPs with pQTL data
m <- left_join(pqtl_clump_snp, pqtl, by = 'SNP')

# Load original pQTL data
pqtl_ori <- fread('/BiO/hae/000005_MRSPI/00_pqtl_sig/ZP3_P21754_OID30265_v1_Cardiometabolic_II_sig.tsv')

# Create SNP_ID for matching
pqtl_ori$SNP_ID <- paste0(pqtl_ori$CHROM, ":", pqtl_ori$GENPOS, ":", pqtl_ori$ALLELE0, ":", pqtl_ori$ALLELE1)
m$SNP_ID <- paste0(m$CHR, ":", m$BP, ":", m$A1, ":", m$A2)  # Ensure matching alleles correctly

# Match datasets using SNP_ID
m_matched <- left_join(m, pqtl_ori, by = "SNP_ID")

# Prepare MR data with necessary columns
mr_data <- m_matched %>%
  select(SNP, CHR, BP, A1 = ALLELE1, A2 = ALLELE0, BETA = BETA.x, SE = SE.x, P = P.x, A1FREQ)

# Check final data
head(mr_data)
dim(mr_data)

#step3_bulk
library(data.table)
library(dplyr)

# Define directories
pqtl_sig_dir <- "/BiO/hae/000005_MRSPI/00_pqtl_sig/"
pqtl_clump_dir <- "/BiO/hae/000005_MRSPI/11_pqtl_sig_clump/"
output_dir <- "/BiO/hae/000005_MRSPI/22_pqtl_sig_clump_QC/"

# Create output directory if it doesn't exist
if (!dir.exists(output_dir)) dir.create(output_dir)

# List all pQTL sig and clump files
pqtl_sig_files <- list.files(pqtl_sig_dir, pattern = "_sig.tsv$", full.names = TRUE)
pqtl_clump_files <- list.files(pqtl_clump_dir, pattern = "_sig_sig.txt$", full.names = TRUE)

# Process each file
for (pqtl_sig_file in pqtl_sig_files) {
  file_base <- tools::file_path_sans_ext(basename(pqtl_sig_file))
  clump_file <- pqtl_clump_files[grepl(file_base, pqtl_clump_files)]
  
  if (length(clump_file) == 0) next
  
  # Load data
  pqtl <- fread(clump_file)
  if (nrow(pqtl) == 0) {
    cat("Skipping empty pqtl file:", clump_file, "\n")
    next
  }
  
  pqtl_clump <- fread(clump_file)
  if (nrow(pqtl_clump) == 0) {
    cat("Skipping empty clump file:", clump_file, "\n")
    next
  }
  
  pqtl_clump_snp <- data.frame(SNP = pqtl_clump$SNP)
  m <- left_join(pqtl_clump_snp, pqtl, by = 'SNP')
  if (nrow(m) == 0) {
    cat("No matching SNPs in:", file_base, "\n")
    next
  }
  
  pqtl_ori <- fread(pqtl_sig_file)
  if (nrow(pqtl_ori) == 0) {
    cat("Skipping empty original pqtl file:", pqtl_sig_file, "\n")
    next
  }

  # Create SNP_ID for matching
  pqtl_ori$SNP_ID <- paste0(pqtl_ori$CHROM, ":", pqtl_ori$GENPOS, ":", pqtl_ori$ALLELE0, ":", pqtl_ori$ALLELE1)
  m$SNP_ID <- paste0(m$CHR, ":", m$BP, ":", m$A1, ":", m$A2)

  # Match datasets
  m_matched <- left_join(m, pqtl_ori, by = "SNP_ID")
  if (nrow(m_matched) == 0) {
    cat("No matched SNPs in:", file_base, "\n")
    next
  }

  # Prepare MR data
  mr_data <- m_matched %>% select(SNP, CHR, BP, A1 = ALLELE1, A2 = ALLELE0, BETA = BETA.x, SE = SE.x, P = P.x, A1FREQ)

  # Save result
  output_file <- paste0(output_dir, file_base, "_MR_ready.tsv")
  fwrite(mr_data, output_file, sep = "\t", quote = FALSE, row.names = FALSE)
  
  cat("Processed:", file_base, "->", output_file, "\n")
}


#step4_extract_clumping_SNP
library(data.table)
library(dplyr)

# Define directories
mr_ready_dir <- "/BiO/hae/000005_MRSPI/22_pqtl_sig_clump_QC/"
clump_dir <- "/BiO/hae/000005_MRSPI/11_pqtl_sig_clump/"
output_dir <- "/BiO/hae/000005_MRSPI/33_pqtl_sig_clump_QC_list/"

# Create output directory if it doesn't exist
if (!dir.exists(output_dir)) dir.create(output_dir)

# List all MR ready and clump files
mr_ready_files <- list.files(mr_ready_dir, pattern = "_MR_ready.tsv$", full.names = TRUE)
clump_files <- list.files(clump_dir, pattern = "_sig_sig.txt_clumped.tsv$", full.names = TRUE)

# Process each file
for (mr_file in mr_ready_files) {
  file_base <- tools::file_path_sans_ext(basename(mr_file))
  clump_file <- clump_files[grepl(gsub("_MR_ready", "", file_base), clump_files)]
  
  if (length(clump_file) == 0) {
    cat("No clumped file found for:", file_base, "\n")
    next
  }
  
  # Load data
  mr_data <- fread(mr_file)
  clumping <- fread(clump_file)
  
  # Extract SNPs from clumped file
  clumping_snp <- data.frame(SNP = clumping$SNP)
  
  # Perform left join to match clumped SNPs with MR ready data
  matched_data <- left_join(clumping_snp, mr_data, by = "SNP")
  
  # Check if matching SNPs exist
  if (nrow(matched_data) == 0) {
    cat("No matching SNPs found in:", file_base, "\n")
    next
  }
  
  # Save the result
  output_file <- paste0(output_dir, "v3_result_", gsub("_MR_ready", "", basename(mr_file)), ".tsv")
  fwrite(matched_data, output_file, sep = "\t", quote = FALSE, row.names = FALSE)
  
  cat("Processed:", file_base, "->", output_file, "\n")
}

#ReverseMR
# Load required libraries
library(data.table)
library(dplyr)
library(archive)
library(TwoSampleMR)
library(MR.SPI)

# Define file paths
pqtl_dir <- "/BiO/hae/000001_UKB_pQTL/"
gwas_clump_file <- "/BiO/hae/000005_MRSPI/55_GWAS_sig_clump/PMID33875891_GCST90003770/gwas_clump_result.clumped"
reverse_output_dir <- "/BiO/hae/000005_MRSPI/66_pqtl_reverse_MR/PMID33875891_GCST90003770/"

# Load GWAS clumped SNPs
gwas_clump <- fread(gwas_clump_file)
gwas_snps <- data.frame(SNP = gwas_clump$SNP)

# Load pQTL tar file
tar_file_name <- "B2M_P61769_OID30725_v1_Inflammation_II.tar"
tar_file <- file.path(pqtl_dir, tar_file_name)
archive_contents <- archive::archive(tar_file)
chromosome_files <- archive_contents$path[grepl("chr[0-9]+|chr1[0-9]|chr2[0-2]", archive_contents$path)]

# Extract necessary chromosome files
chromosome_data <- lapply(chromosome_files, function(file_path) {
  archive_read <- archive::archive_read(tar_file, file = file_path)
  con <- gzcon(archive_read)
  raw_text <- readLines(con, warn = FALSE)
  text_input <- paste(raw_text, collapse = "\n")
  data <- fread(text_input, na.strings = c("", "NA"))
  close(archive_read)
  return(data)
})

# Combine pQTL data
pqtl_data <- rbindlist(chromosome_data, fill = TRUE)

# Format SNP IDs in pQTL data for matching
pqtl_data$SNP <- sub(":imp:v1", "", pqtl_data$ID)

# Prepare GWAS data for joining
tmp <- fread("/BiO/hae/000002_GWAS/PMID33875891/GCST90003770_buildGRCh37.tsv")
tmp$match <- paste(tmp$chromosome, tmp$base_pair_location, tmp$other_allele, tmp$effect_allele, sep=":")
names(tmp)[2] <- "SNP"
clumping_snp <- fread(gwas_clump_file)
clumping_snp2 <- data.frame(SNP = clumping_snp$SNP)

# Join GWAS data with clumped SNPs
gwas_data <- left_join(clumping_snp2, tmp, by="SNP")
extract_clumping_infor <- gwas_data[, c("SNP", "match")]

# Prepare pQTL data for merging
pqtl_data$match <- sub(":imp:v1", "", pqtl_data$ID)
pqtl_data2 <- left_join(extract_clumping_infor, pqtl_data, by='match')

# Calculate p-values and minor allele frequencies
pqtl_data2$P <- 10^(-pqtl_data2$LOG10P)
pqtl_data2$MAF <- pmin(pqtl_data2$A1FREQ, 1 - pqtl_data2$A1FREQ)

# Extract base pair positions
pqtl_data2$BP <- as.numeric(sapply(strsplit(pqtl_data2$match, ":"), `[`, 2))

# Prepare exposure and outcome data
gwas_exposure <- gwas_data[, c("SNP", "chromosome", "base_pair_location", "effect_allele", "other_allele", "beta", "standard_error", "p_value", "effect_allele_frequency")]
names(gwas_exposure) <- c("SNP", "CHR", "BP", "effect_allele.exposure", "other_allele.exposure", "beta.exposure", "se.exposure", "pval.exposure", "eaf.exposure")
gwas_exposure$exposure <- "Brain MRI Volume"
gwas_exposure$id.exposure <- gwas_exposure$SNP

pqtl_outcome <- pqtl_data2[, c("SNP.x", "CHROM", "BP", "ALLELE0", "ALLELE1", "BETA", "SE", "P", "MAF")]
names(pqtl_outcome) <- c("SNP", "CHR", "BP", "effect_allele.outcome", "other_allele.outcome", "beta.outcome", "se.outcome", "pval.outcome", "eaf.outcome")
pqtl_outcome$outcome <- "Protein"
pqtl_outcome$id.outcome <- pqtl_outcome$SNP

#NA_OMIT
pqtl_outcome2 <- na.omit(pqtl_outcome)
zztmp <- data.frame(pqtl_outcome2$SNP)
names(zztmp)[1] <- c("SNP")
gwas_exposure2 <- left_join(zztmp,gwas_exposure)

# Harmonize data
harmonized_data <- harmonise_data(gwas_exposure, pqtl_outcome2, action = 1)

# Prepare data for MR-SPI analysis
mr_spi_input <- harmonized_data %>%
  select(SNP, beta.exposure, se.exposure, beta.outcome, se.outcome, eaf.outcome) %>%
  na.omit()

# Perform MR-SPI analysis
mr_spi_result <- MR.SPI(
  gamma = mr_spi_input$beta.exposure,
  Gamma = mr_spi_input$beta.outcome,
  se_gamma = mr_spi_input$se.exposure,
  se_Gamma = mr_spi_input$se.outcome,
  n1 = 54219,  # GWAS sample size
  n2 = 21282,  # pQTL sample size
  freq = mr_spi_input$eaf.outcome,
  max_clique = TRUE,
  verbose = TRUE
)

beta <- mr_spi_result$betaHat[[1]]
se <- mr_spi_result$beta.sdHat[[1]]
ci_lower <- mr_spi_result$ci[[1]][1]
ci_upper <- mr_spi_result$ci[[1]][2]
p_value <- 2 * pnorm(-abs(beta / se))


result_df <- data.frame(
    File = basename(tar_file_name),
    Beta = beta,
    SE = se,
    CI_Lower = ci_lower,
    CI_Upper = ci_upper,
    P_Value = p_value
  )

if (!dir.exists(reverse_output_dir)) dir.create(reverse_output_dir)
output_file <- file.path(reverse_output_dir, paste0("MR_SPI_", gsub(".tar", "", tar_file_name), ".csv"))
fwrite(result_df, output_file, sep = ",", quote = FALSE, row.names = FALSE)


