#Try1
import matplotlib.pyplot as plt
from PIL import Image
import numpy as np
from scipy.ndimage import label, binary_opening, binary_closing, binary_dilation, distance_transform_edt
from skimage.segmentation import watershed
from skimage.feature import peak_local_max

def visualize_detected_dots(image_path):
    image = Image.open(image_path).convert("L")  
    image_array = np.array(image)
    
    gamma = 0.8
    image_array = 255 * (image_array / 255) ** gamma
    image_array = np.clip(image_array, 0, 255).astype(np.uint8)
    image_array = (image_array - np.min(image_array)) / (np.max(image_array) - np.min(image_array)) * 255
    image_array = image_array.astype(np.uint8)

    threshold = np.mean(image_array) + 0.1 * np.std(image_array)
    blue_mask = image_array > threshold  

    cleaned_mask = binary_opening(blue_mask, structure=np.ones((2,2)))  
    cleaned_mask = binary_closing(cleaned_mask, structure=np.ones((2,2)))  
    cleaned_mask = binary_dilation(cleaned_mask, structure=np.ones((2,2)))  

    distance_map = distance_transform_edt(cleaned_mask)
    local_maxi = peak_local_max(distance_map, indices=False, footprint=np.ones((15, 15)), labels=cleaned_mask)
    markers, _ = label(local_maxi)
    watershed_labels = watershed(-distance_map, markers, mask=cleaned_mask)

    num_features = len(np.unique(watershed_labels)) - 1  

    fig, ax = plt.subplots(figsize=(8, 8))
    ax.imshow(image_array, cmap="gray")
    ax.contour(watershed_labels, colors="red", linewidths=0.5)  
    ax.set_title(f"Detected Dots: {num_features}")
    plt.show()

image1_path = "/Users/jeonghaeun/Downloads/Kim_250219/TOT8001.tif"
image2_path = "/Users/jeonghaeun/Downloads/Kim_250219/TOT1001.tif"

visualize_detected_dots(image1_path)
visualize_detected_dots(image2_path)


-----

#Try2_including saving file for converting image
import os
import matplotlib.pyplot as plt
from PIL import Image
import numpy as np
from scipy.ndimage import label, binary_opening, binary_closing, binary_dilation, distance_transform_edt
from skimage.segmentation import watershed
from skimage.feature import peak_local_max
import pandas as pd

def count_dots(image_path):
    image = Image.open(image_path).convert("L")  
    image_array = np.array(image)    
    gamma = 0.8
    image_array = 255 * (image_array / 255) ** gamma
    image_array = np.clip(image_array, 0, 255).astype(np.uint8)
    image_array = (image_array - np.min(image_array)) / (np.max(image_array) - np.min(image_array)) * 255
    image_array = image_array.astype(np.uint8)
    threshold = np.mean(image_array) + 0.1 * np.std(image_array)
    blue_mask = image_array > threshold  
    cleaned_mask = binary_opening(blue_mask, structure=np.ones((2,2)))  
    cleaned_mask = binary_closing(cleaned_mask, structure=np.ones((2,2)))  
    cleaned_mask = binary_dilation(cleaned_mask, structure=np.ones((2,2)))  
    distance_map = distance_transform_edt(cleaned_mask)
    local_maxi = peak_local_max(distance_map, indices=False, footprint=np.ones((15, 15)), labels=cleaned_mask)
    markers, _ = label(local_maxi)
    watershed_labels = watershed(-distance_map, markers, mask=cleaned_mask)
    num_features = len(np.unique(watershed_labels)) - 1  

    # 결과 이미지 저장
    fig, ax = plt.subplots(figsize=(8, 8))
    ax.imshow(image_array, cmap="gray")
    ax.contour(watershed_labels, colors="red", linewidths=0.5)  
    ax.set_title(f"Detected Dots: {num_features}")

    # 저장 폴더 설정
    save_folder = "/Users/jeonghaeun/Downloads/TOT_results/6"
    if not os.path.exists(save_folder):
        os.makedirs(save_folder)

    # PNG로 저장 후 JPG로 변환
    save_path_png = os.path.join(save_folder, os.path.basename(image_path).replace(".jpg", "_detected.png"))
    plt.savefig(save_path_png, dpi=300)
    plt.close()

    # PNG → JPG 변환
    save_path_jpg = save_path_png.replace(".png", ".jpg")
    img = Image.open(save_path_png)
    img.convert("RGB").save(save_path_jpg, "JPEG")
    os.remove(save_path_png)  # PNG 파일 삭제

    return num_features


# 이미지 폴더 경로
image_folder = "/Users/jeonghaeun/Downloads/DAPI/6"

# 이미지 파일 리스트 가져오기
image_files = sorted([f for f in os.listdir(image_folder) if f.endswith(".jpg")])

# 결과 저장할 리스트
results = []

# 각 이미지에 대해 개수 측정 & 저장
for image_file in image_files:
    image_path = os.path.join(image_folder, image_file)
    dot_count = count_dots(image_path)
    results.append({"Filename": image_file, "Detected Dots": dot_count})
    print(f"{image_file}: {dot_count} dots detected")

# 데이터프레임 정리 후 CSV 저장
df = pd.DataFrame(results)
df.to_csv("detected_dots_count.csv", index=False)
print("결과가 'detected_dots_count.csv' 파일로 저장되었습니다.")

